# Import
import numpy as np
import pandas as pd
import requests
import xlsxwriter
import math
# Import CSV files with stock names
stocks = pd.read_csv('sp_500_stocks.csv')
# Import secrets file
from secrets import IEX_CLOUD_API_TOKEN
# Making test API call with AAPL stock
""""
symbol = 'AAPL'
api_url = f'https://sandbox.iexapis.com/stable/stock/{symbol}/quote/?token={IEX_CLOUD_API_TOKEN}'
# Passing URL to the Requests module and converting data object into json
data = requests.get(api_url).json()
# Parsing API call
price = data['latestPrice']
market_cap = data['marketCap']"""
# Creating columns for the DataFrame
my_columns = ['Ticker', 'Stock Price', 'Market Capitalization', 'Number of Shares to Buy']
# Passing my_columns to the columns in the Pandas DataFrame
final_dataframe = pd.DataFrame(columns = my_columns)
# Function to create chunks of 100 from the original list of 504 stocks
def chunks(lst, n):
    for i in range(0, len(lst), n):
         yield lst[i:i+n]
# Creating chunks of 100 stocks to do batch API calls and appending them with a ','
symbol_groups = list(chunks(stocks['Ticker'], 100))
symbol_strings = []
for i in range(0, len(symbol_groups)):
    symbol_strings.append(','.join(symbol_groups[i]))
# Update DataFrame
final_dataframe = pd.DataFrame(columns = my_columns)
# Using a for loop and f string to pass stock symbol(symbol_string) to the URL
for symbol_string in symbol_strings:
    batch_api_call_url = f'https://sandbox.iexapis.com/stable/stock/market/batch/?types=quote&symbols={symbol_string}&token={IEX_CLOUD_API_TOKEN}'
    data = requests.get(batch_api_call_url).json()
    for symbol in symbol_string.split(','):
        final_dataframe = final_dataframe.append(
                                        pd.Series([symbol,
                                                   data[symbol]['quote']['latestPrice'],
                                                   data[symbol]['quote']['marketCap'],
                                                   'N/A'],
                                                  index = my_columns),
                                        ignore_index = True)
# Input
portfolio_size = input('Enter the value of your portfolio: ')
# Try/Except clause to handle errors with input
try:
    val = float(portfolio_size)
except ValueError:
    print('That is not a number \n Try again but this time a number')
    portfolio_size = input('Enter the value of your portfolio: ')
# Calculating the position size depending upon the portfolio_size and number of stocks
position_size = float(portfolio_size) / len(final_dataframe.index)
# Updating the 'Number of Shares to Buy' column with the new data generated by equal weight distribution
for i in range(0, len(final_dataframe['Ticker'])-0):
    final_dataframe.loc[i, 'Number of Shares to Buy'] = math.floor(position_size / final_dataframe['Stock Price'][i])
print(final_dataframe.to_string())






